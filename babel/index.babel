class Page extends React.Component {
  constructor() {
    super();
    this.handleClick = this.handleClick.bind(this);
    this.state = {
      celcius: true
    };
  }
  
  handleClick() {
    this.setState({
      celcius: !this.state.celcius
    });
  }

  // This function loads before the page loads. It is how I'm handling loading the
  // data before it's pulled in with AJAX
  componentWillMount() {
    navigator.geolocation.getCurrentPosition(location => {
      $.ajax({
        type: "GET",
        url: getWeatherUrl(location.coords.latitude, location.coords.longitude),
        context: this,
        success: function(geoData) {
          this.setState({
            tempFahrenheit: geoData.main.temp,
            tempCelcius: toCelcius(geoData.main.temp),
            humidity: geoData.main.humidity,
            pressure: geoData.main.pressure,
            tempMin: geoData.main.temp_min,
            tempMax: geoData.main.temp_max,
            seaLevel: geoData.main.sea_level,
            windSpeed: (geoData.wind.speed / .44704).toFixed(2),
            weather: geoData.weather[0].main,
            description: geoData.weather[0].description.capitalize(),
            id: geoData.weather[0].id,
            icon: geoData.weather[0].icon,
            sunrise: geoData.sys.sunrise,
            sunset: geoData.sys.sunset,
            latitude: location.coords.latitude,
            longitude: location.coords.longitude,
            date: formatDate(new Date())
          });
        }
      });
    });
    
    // After getting the coordinates from the browser
    // we are making an AJAX call to get geocoding data from
    // Google Maps API
    navigator.geolocation.getCurrentPosition(location => {
      $.ajax({
        type: "GET",
        url: getGeocoding(location.coords.latitude, location.coords.longitude),
        context: this,
        success: function(geoData) {
          this.setState({
            city: geoData.results[3].formatted_address
          });
        }
      });
    });
  }

  render() {
    return (
      <div className="container">
        <Weather
          description={this.state.description}
          city={this.state.city}
          date={this.state.date}
          temp={this.state.celcius ? this.state.tempFahrenheit : this.state.tempCelcius}
          onClick={this.handleClick}
          country={this.state.country}
        />
        <WeatherBox
          humidity={this.state.humidity}
          pressure={this.state.pressure}
          seaLevel={this.state.seaLevel}
          tempMax={this.state.tempMax}
          tempMin={this.state.tempMin}
          windSpeed={this.state.windSpeed}
          imageSrc={
            this.state.icon
              ? `https://res.cloudinary.com/lucedesign/image/upload/v1509486590/svg%20weather%20icons/${idIconLookup[this.state.id]}`
              : `https://res.cloudinary.com/lucedesign/image/upload/v1509486574/svg%20weather%20icons/day.svg`
          }
          country={this.state.country}
        />
      </div>
    );
  }
}

// Contains the weather, description, city, date, and temp
const Weather = props => (
  <div className="weather">
    <p>{props.description ? `${props.description} in` : ""}</p>
    <p>{props.city ? `${props.city}` : ""}</p>
    <p>{props.date ? `${props.date}` : ""}</p>
    <p onClick={props.onClick}>{props.temp ? `${props.temp}°` : ""}</p>
  </div>
);


// The rounded weather box that contains the icon and additional weather data
const WeatherBox = props => (
  <div className="weather-box">
    <div className="humidity container">
      <p>{props.pressure ? `Pressure: ${props.pressure} hPa` : ""}</p>
      <p>{props.humidity ? `Humidity: ${props.humidity}%` : ""}</p>
      <p>{props.seaLevel ? `Sea Level: ${props.seaLevel}` : ""}</p>
    </div>
    <img src={props.imageSrc} />
    <div className="tempMax container">
      <p>{props.tempMax ? `Max Temp: ${props.tempMax}°` : ""}</p>
      <p>{props.tempMin ? `Min Temp: ${props.tempMin}°` : ""}</p>
      <p>{props.windSpeed ? `Wind Speed: ${props.windSpeed} mph` : ""}</p>
    </div>
  </div>
);

// Add a function to the String type to capitalize all letters in a sentence
String.prototype.capitalize = function() {
  return this.replace(/(?:^|\s)\S/g, function(a) {
    return a.toUpperCase();
  });
};

// Helper functions -------------------------------------------------
let toCelcius = (temp) => ((temp - 32) * 5 / 9).toFixed(1);


// Check if it's between 6am and 6pm and return true or false
let isDayTime = () => {
  let date = new Date();
  let hour = date.getHours();
  if (hour < 18 && hour > 6) {
    return true;
  } else {
    return false;
  }
};


// Get a pretty date
let formatDate = (date) => {
  let monthNames = [
    "January", "February", "March",
    "April", "May", "June", "July",
    "August", "September", "October",
    "November", "December"
  ];

  let day = date.getDate();
  let monthIndex = date.getMonth();
  let year = date.getFullYear();

  return `${monthNames[monthIndex]} ${day}, ${year}`;
}

const getWeatherUrl = (lat, long) => {
  return `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&units=imperial&,us&appid=cdd2ee522563ce044210c7ce28200c53`;
};

const getGeocoding = (lat, long) => {
  return `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${long}&sensor=true`;
};

// Icon Lookup Table ----------------------------------------------------------------------------
let idIconLookup = {
  200: "thunder.svg",
  201: "thunder.svg",
  202: "thunder.svg",
  210: "thunder.svg",
  211: "thunder.svg",
  212: "thunder.svg",
  221: "thunder.svg",
  230: "thunder.svg",
  231: "thunder.svg",
  232: "thunder.svg",
  300: "rainy-4.svg",
  301: "rainy-4.svg",
  302: "rainy-4.svg",
  310: "rainy-5.svg",
  311: "rainy-5.svg",
  312: "rainy-5.svg",
  313: "rainy-6.svg",
  314: "rainy-6.svg",
  321: "rainy-6.svg",
  500: "rainy-7.svg",
  501: "rainy-7.svg",
  502: "rainy-7.svg",
  503: "rainy-7.svg",
  504: "rainy-7.svg",
  511: "rainy-7.svg",
  520: "rainy-7.svg",
  521: "rainy-7.svg",
  522: "rainy-7.svg",
  531: "rainy-7.svg",
  600: "snowy-4.svg",
  601: "snowy-4.svg",
  611: "snowy-4.svg",
  612: "snowy-5.svg",
  615: "snowy-5.svg",
  616: "snowy-5.svg",
  620: "snowy-6.svg",
  621: "snow-6.svg",
  622: "snowy-6.svg",
  701: "cloudy.svg",
  711: "cloudy.svg",
  721: "cloudy.svg",
  731: "cloudy.svg",
  741: "cloudy.svg",
  751: "cloudy.svg",
  761: "cloudy.svg",
  762: "cloudy.svg",
  771: "cloudy.svg",
  781: "cloudy.svg",
  800: isDayTime() ? "day.svg" : "night.svg",
  801: isDayTime() ? "cloudy-day-3.svg" : "cloudy-night-3.svg",
  802: isDayTime() ? "cloudy-day-3.svg" : "cloudy-night-3.svg",
  803: isDayTime() ? "cloudy-day-3.svg" : "cloudy-night-3.svg",
  804: isDayTime() ? "cloudy-day-3.svg" : "cloudy-night-3.svg"
};

// Render the Page component
ReactDOM.render(<Page />, document.getElementById("app"));

